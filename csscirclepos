#!/usr/bin/perl -w

use Getopt::Long;

# This computes positions for a CSS stylesheet that arranges links in a circle.
# Copy and paste the values into a stylesheet.
# TODO: 
# - document this.
# - make offset etc. parameters? Make different extends for x and y directions?
# - emit CSS code?
# - Move functions to lib?
#
# Note: The values for $center etc. are percent values.

# Normally, values are specified in percent. This option allows you to specify
# values as absolute, they are then interpreted as pixels instead of percent.
my $pixels ='';

# Normally the extend is so that everything fits nicely into a screen when
# values are seen as percent. With this option, you can specify a different
# extend (for example, 500, so everything fits onto an 800x600
# screen).
my $extend = 50;

# Normally, this produces output that you can paste directly into a CSS style
# sheet. If you specify this option, the bare values are shown.
my $bare = '';

GetOptions('pixels=i' => \$pixels, 'extend=f' => \$extend, 'bare' => \$bare);

$usage = "Usage: $0 <count>\n";

if(scalar(@ARGV) != 1) {
  print $usage;
  exit(1);
}

my $dowrite = writeCss;

if($bare) {
  $dowrite = \&writeBare;
}

# Those are percent values:
$center = 50;
$offset = $extend / 2;

$clockwise = 1;
$count = $ARGV[0];
#??$xextend = $yextend = $ARGV[1];

$pi = (atan2(1, 1) * 4);
$fullcircle = 2 * $pi;
$step = $fullcircle / $count;

$startAngle = grad2rad(90);
#??print $startAngle;

#??printf "Step: %d\n", rad2grad($step);

my @angles;
if($clockwise) {
  for($angle = $startAngle; $angle > $startAngle - $fullcircle; $angle -= $step) {
    #??printf "Angle: %d\n", rad2grad($angle);
    push(@angles, $angle);
  }
}
else {
  for($angle = $startAngle; $angle < $startAngle + $fullcircle; $angle += $step) {
    #??printf "Angle: %d\n", rad2grad($angle);
    push(@angles, $angle);
  }
}

#??print map { rad2grad($_) } @angles;

$count = 0;
foreach $angle (@angles) { 
  my $sin = sin($angle);
  my $cos = cos($angle);
  #??print "Sin: $sin, Cos: $cos\n";
  my $x = $center + $offset * $cos;

  # In the stylesheet we use left and top, so invert this value.
  my $y = 100 - ($center + $offset * $sin);

  &$dowrite($x, $y, $count++);
}

sub writeBare {
  my $x = shift;
  my $y = shift;

  # Simply printing as integers just truncates, so we round.
  printf "%d, %d\n", round($x), round($y);
}

sub writeCss {
  my $x = shift;
  my $y = shift;
  my $count = shift;

  print("li.$count {\n");
  print("  position: absolute\n");
  print("  left: $x\n");
  print("  bottom: $y\n");
  print("}\n");
}


sub grad2rad {
  my $grad = shift;
  return 
  $grad *
  $pi /
  180;
}

sub rad2grad {
  my $rad = shift;
  return $rad * 180 / $pi;
}

sub round {
  my $f = shift;
  return sprintf("%.0f", $f);
}
